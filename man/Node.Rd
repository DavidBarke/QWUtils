% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Node.R
\docType{data}
\name{Node}
\alias{Node}
\title{Store the session object of modules}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
Node
}
\description{
Use nodes to store the session objects of all modules in a shiny app in a tree-like
data-structure. A node object is an instantiation of the R6Class 'node'.
}
\details{
Instantiate a new node with \code{node$new(name, parent, session)}. Passing the
arguments \code{name} and \code{session} is mandatory. The root or entry node to
a tree obviously has no parent.
}
\section{Usage}{

\preformatted{node <- Node$new(name, parent, session)
}
}

\section{Methods}{

\describe{
  \item{\code{new(name, parent, session)}}{Initialize the node. Arguments
  \code{name} and \code{session} are mandatory.
    \tabular{ll}{
      \code{name} \tab \code{\link[base:character]{Character}}. Node's name. \cr
      \code{parent} \tab A \code{Node} object. \cr
      \code{session} \tab A \code{\link[shiny:session]{Session}} object.
    }
  }
  \item{\code{add_child(child)}}{Add a child to the node. You usually don't
  need to call this function.
    \tabular{ll}{
       \code{child} \tab A \code{Node} object.
    }
  }
  \item{\code{child(path_to_child)}}{Get a child of the node determined by
  the character vector \code{path_to_child}. If there is a node in with the
  name of the first element of \code{path_to_child}, \code{child()} looks in
  the children of this node for an child node with the name of the second
  element of \code{path_to_child} and so on and returns the last child found.
  Calling this method without arguments has the same effect as
  }
  \item{\code{children_names()}}{Returns the names of all children nodes as a
  \code{\link[base:character]{character}} vector.
  }
  \item{\code{create_list()}}{Returns a list representing all child and
  child-child nodes.
  }
  \item{\code{get(what)}}{Returns the private field or method with the name
    \code{what}.
  }
  \item{\code{sibling(name)}}{Returns the sibling node with name \code{name}.
  Calling this method without arguments returns the names of all siblings.
  }
}
}

\examples{
\dontrun{
  # Entry point of shiny app
  server <- function(input, output, session) {
    # root node has no parent
    self <- node$new("root", session = session)

    shiny::callModule(module, "id_module", parent = self)
  }

  # Module server function
  module <- function(input, output, session, parent) {
    self <- node$new("module", parent, session)

    shiny::callModule(module, "id_module", parent = self)
  }

  module_2 <- function(input, output, session, parent) {
    # Children can have the same name as their parent
    self <- node$new("module", parent, session)
  }
}

# Instantiate nodes
root <- node$new("root", session = "session")
branch_1 <- node$new("branch_1", root, "session")
branch_2 <- node$new("branch_2", root, "session")
leave <- node$new("leave", branch_1, "session")

# Returns leave node
root$child(c("branch_1", "leave"))

# Returns branch_2 node
branch_1$sibling(branch_1$sibling()[[1]])
leave$get("parent")$sibling("branch_2")
leave$get("parent")$get("parent")$child("branch_2")

}
\keyword{datasets}
