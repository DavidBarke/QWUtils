% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TabBox.R
\docType{data}
\name{TabBox}
\alias{TabBox}
\title{TabBox}
\format{An object of class \code{R6ClassGenerator} of length 24.}
\usage{
TabBox
}
\description{
\code{\link[R6:R6Class]{R6Class}} expanding the functionalities of
\code{\link[shinydashboard]{tabBox}}. A TabBox object contains methods for
creating the tabBox, inserting and removing \code{\link[shiny]{tabPanel}}
elements and the ability to expand the usual tabBox with an additional action
button which closes a tab.
}
\section{Usage}{

\preformatted{viewer <- TabBox$new("viewer", title = "Viewer")

# In UI:
ui <- viewer$tabBox()

# In server function:
server <- function(input, output, session) {
  viewer$set_session(session)
}
}
}

\section{Methods}{

\describe{
  \item{\code{new(id, title = "Viewer", width = 6, height = NULL,
  side = c("left", "right"))}}{Initialize the TabBox object.
    \tabular{ll}{
      \code{id} \tab \code{\link[base:character]{Character.}} If provided, you
      can use \code{input$id} in your server logic to determine which of the
      current tabs is active. The value will correspond to the \code{value}
      argument that is passed to \code{\link[shiny]{tabPanel}}. Don't forget
      to namespace \code{id}, if inside a module. \cr
      \code{title} \tab Title for the tabBox. \cr
      \code{width} \tab The width of the box, using the Bootstrap grid system.
      This is used for row-based layouts. The overall width of a region is 12,
      so the default valueBox width of 4 occupies 1/3 of that width. For
      column-based layouts, use \code{\link[base]{NULL}} for the width; the
      width is set by the column that contains the box. \cr
      \code{height} \tab The height of a box, in pixels or other CSS unit. By
      default the height scales automatically with the content. \cr
      \code{side} \tab Which side of the box the tabs should be on ("left" or
      "right"). When \code{side="right"}, the order of tabs will be reversed.
    }
  }
  \item{\code{append_tab(tab, select = FALSE, closeable = TRUE)}}{Append a
    \code{\link[shiny:tabPanel]{tabPanel}} to the tabBox.
    \tabular{ll}{
      \code{tab} \tab A \code{\link[shiny]{tabPanel}}. \cr
      \code{select} \tab If \code{\link[base:logical]{TRUE}}, select \code{tab}
      upon being inserted. \cr
      \code{closeable} \tab If \code{\link[base:logical]{TRUE}}, \code{tab}
      is closeable via an \code{\link[shiny]{actionButton}}.
    }
  }
  \item{\code{insert_tab(tab, target, position = c("before", "after"),
  select = FALSE, closeable = TRUE)}}{Insert a
    \code{\link[shiny:tabPanel]{tabPanel}} to the tabBox next to \code{target}.
    \tabular{ll}{
      \code{tab} \tab A \code{\link[shiny]{tabPanel}}. \cr
      \code{target} \tab The \code{value} of an existing \code{\link[shiny]{tabPanel}},
      next to which \code{tab} will be added. \cr
      \code{position} \tab Should \code{tab} be added before or after the
      \code{target} tab? \cr
      \code{select} \tab If \code{\link[base:logical]{TRUE}}, select \code{tab}
      upon being inserted. \cr
      \code{closeable} \tab If \code{\link[base:logical]{TRUE}}, \code{tab}
      is closeable via an \code{\link[shiny]{actionButton}}.
    }
  }
  \item{\code{is_open(value)}}{Returns \code{\link[base:logical]{TRUE}}, if
  a tab with \code{value = value} is open.
  }
  \item{\code{is_value(value)}}{Returns \code{\link[base:logical]{TRUE}}, if
  a tab with \code{value = value} ever existed (currently open or not).
  }
  \item{\code{prepend_tab(tab, select = FALSE, closeable = TRUE)}}{Prepend a
    \code{\link[shiny:tabPanel]{tabPanel}} to the tabBox.
    \tabular{ll}{
      \code{tab} \tab A \code{\link[shiny]{tabPanel}}. \cr
      \code{select} \tab If \code{\link[base:logical]{TRUE}}, select \code{tab}
      upon being inserted. \cr
      \code{closeable} \tab If \code{\link[base:logical]{TRUE}}, \code{tab}
      is closeable via an \code{\link[shiny]{actionButton}}.
    }
  }
  \item{\code{remove_tab(target)}}{Remove the tab with \code{value=target}.
  }
  \item{\code{set_session(session)}}{Call this function in the server function
  to connect the TabBox with a session.
    \tabular{ll}{
      \code{session} \tab A shiny \code{\link[shiny:session]{session}} object.
    }
  }
  \item{code{tabBox()}}{Return the HTML representing the \code{\link[shinydashboard]{
  tabBox}}.
  }
}
}

\keyword{datasets}
