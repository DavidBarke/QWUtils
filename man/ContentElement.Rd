% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ContentElement.R
\name{ContentElement}
\alias{ContentElement}
\title{Content Element}
\description{
Content Element
}
\section{Methods}{

\describe{
  \item{\code{new(id, title, ...,
    session = shiny::getDefaultReactiveDomain, footer = NULL, closeable = FALSE,
    collapsible = TRUE, width = 12, height = NULL, tabPanel_list = NULL)}}{
    \tabular{ll}{
      \code{id} \tab The content element's id. \cr
      \code{title} \tab Title for the tabBox. \cr
      \code{...} \tab \code{\link[shiny]{tabPanel}} elements to include in the
        tabset. \cr
      \code{session} \tab \cr
      \code{footer} \tab Footer below the tabBox. \cr
      \code{closeable} \tab If \code{\link[base:logical]{TRUE}}, the content
        element is closeable. \cr
      \code{collapsible} \tab If \code{\link[base:logical]{TRUE}}, the content
        element is collapsible. \cr
      \code{width} \tab The width of the box, using the Bootsgrap grid system.
        This is used for row-based layouts. The overall width of a region is 12,
        so the default valueBox width of 4 occupies 1/3 of that width. For
        column-based layouts, use \code{\link[base]{NULL}} for the width; the
        width is set by the column that contains the box. \cr
      \code{height} \tab The height of a box, in pixels or other CSS unit. By
        default the height scales automatically with the content. \cr
      \code{tabPanel_list} \tab Instead of using the \code{...} argument for
        passing \code{\link[shiny]{tabPanel}} elements, you may pass a list
        of \code{tabPanel} elements in this argument. \cr
    }
  }
  \item{\code{append_tab(tab, select = FALSE, closeable = FALSE)}}{
    \tabular{ll}{
      \code{tab} \tab The \code{\link[shiny]{tabPanel}} element to be added. \cr
      \code{select} \tab Should \code{tab} be selected upon being inserted? \cr
      \code{closeable} \tab If \code{\link[base:logical]{TRUE}}, the added
        tab is closeable via an action button. \cr
    }
  }
  \item{\code{hide()}}{Hide this content element.
  }
  \item{\code{get_id()}}{Get the content element's id.
  }
  \item{\code{show()}}{Show the content element.
  }
  \item{\code{show_by_action_button(id, session = shiny::getDefaultReactiveDomain())}}{
    Show the content element, if the \code{\link[shiny]{actionButton}} with
    \code{inputId == id} is clicked. \code{session} is the session, in which
    the actionButton was defined.
  }
  \item{\code{remove_tab(target)}}{Dynamically remove a \code{\link[shiny]{tabPanel}}.
    \tabular{ll}{
      \code{target} \tab The \code{value} of the \code{tabPanel} that you want
        to remove. \cr
    }
  }
  \item{\code{ui(hidden = TRUE)}}{Get the ui (similar to
    \code{\link[shinydashboard]{tabBox}}) associated with this content element.
    You should only call this function once. If \code{hidden}, the ui starts
    in a hidden mode (see \code{\link[shinyjs]{hidden}}). Use \code{this$show()}
    for showing the ui.
  }
  \item{\code{update_tab(selected)}}{Change the selected tab on the client.
    \tabular{ll}{
      \code{selected} \tab The name of the tab to make active.
    }
  }
}
}

